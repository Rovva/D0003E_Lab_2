
D0003E_Lab_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000007c4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800104  00800104  0000085c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001235  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6d  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bf  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b6f  00000000  00000000  000035ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000415c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 ec       	ldi	r30, 0xC4	; 196
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 30       	cpi	r26, 0x04	; 4
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a4 e0       	ldi	r26, 0x04	; 4
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 32       	cpi	r26, 0x2F	; 47
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  92:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:
int pp;
mutex mutexlock = {0,0};

void init_lcd() {
	// LCD Enable (LCDEN) & Low Power Waveform (LCDAB)
	LCDCRA = (1<<LCDEN) | (1<<LCDAB) | (0<<LCDIF) | (0<<LCDIE) | (0<<LCDBL);
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	// external asynchronous clock source (LCDCS), 1/3 bias (LCD2B), 1/4 duty (LCDMUX1:0), 25 segments enabled (LCDPM2:0)
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// prescaler setting N=16 (LCDPS2:0), clock divider setting D=8 (LCDCD2:0)
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>

	// drive time 300 microseconds (LCDDC2:0), contrast control voltage 3.35 V (LCDCC3:0)
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  b2:	08 95       	ret

000000b4 <digitLookUp>:

}

uint16_t digitLookUp(uint8_t c) {
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	64 97       	sbiw	r28, 0x14	; 20
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61

	if(c < 48 || c > 57) {
  c8:	90 ed       	ldi	r25, 0xD0	; 208
  ca:	98 0f       	add	r25, r24
  cc:	9a 30       	cpi	r25, 0x0A	; 10
  ce:	90 f5       	brcc	.+100    	; 0x134 <digitLookUp+0x80>
		return 0;
	}

	uint16_t binary[10];

	binary[0] = 0b0001010101010001; // 0
  d0:	21 e5       	ldi	r18, 0x51	; 81
  d2:	35 e1       	ldi	r19, 0x15	; 21
  d4:	3a 83       	std	Y+2, r19	; 0x02
  d6:	29 83       	std	Y+1, r18	; 0x01
	binary[1] = 0b0000000100010000; // 1
  d8:	20 e1       	ldi	r18, 0x10	; 16
  da:	31 e0       	ldi	r19, 0x01	; 1
  dc:	3c 83       	std	Y+4, r19	; 0x04
  de:	2b 83       	std	Y+3, r18	; 0x03
	binary[2] = 0b0001000111100001; // 2
  e0:	21 ee       	ldi	r18, 0xE1	; 225
  e2:	31 e1       	ldi	r19, 0x11	; 17
  e4:	3e 83       	std	Y+6, r19	; 0x06
  e6:	2d 83       	std	Y+5, r18	; 0x05
	binary[3] = 0b0001000110110001; // 3
  e8:	21 eb       	ldi	r18, 0xB1	; 177
  ea:	31 e1       	ldi	r19, 0x11	; 17
  ec:	38 87       	std	Y+8, r19	; 0x08
  ee:	2f 83       	std	Y+7, r18	; 0x07
	binary[4] = 0b0000010110110000; // 4
  f0:	20 eb       	ldi	r18, 0xB0	; 176
  f2:	35 e0       	ldi	r19, 0x05	; 5
  f4:	3a 87       	std	Y+10, r19	; 0x0a
  f6:	29 87       	std	Y+9, r18	; 0x09
	binary[5] = 0b0001010010110001; // 5
  f8:	21 eb       	ldi	r18, 0xB1	; 177
  fa:	34 e1       	ldi	r19, 0x14	; 20
  fc:	3c 87       	std	Y+12, r19	; 0x0c
  fe:	2b 87       	std	Y+11, r18	; 0x0b
	binary[6] = 0b0001010011110001; // 6
 100:	21 ef       	ldi	r18, 0xF1	; 241
 102:	34 e1       	ldi	r19, 0x14	; 20
 104:	3e 87       	std	Y+14, r19	; 0x0e
 106:	2d 87       	std	Y+13, r18	; 0x0d
	binary[7] = 0b0001000100010000; // 7
 108:	20 e1       	ldi	r18, 0x10	; 16
 10a:	31 e1       	ldi	r19, 0x11	; 17
 10c:	38 8b       	std	Y+16, r19	; 0x10
 10e:	2f 87       	std	Y+15, r18	; 0x0f
	binary[8] = 0b0001010111110001; // 8
 110:	21 ef       	ldi	r18, 0xF1	; 241
 112:	35 e1       	ldi	r19, 0x15	; 21
 114:	3a 8b       	std	Y+18, r19	; 0x12
 116:	29 8b       	std	Y+17, r18	; 0x11
	binary[9] = 0b0001010110110000; // 9
 118:	20 eb       	ldi	r18, 0xB0	; 176
 11a:	35 e1       	ldi	r19, 0x15	; 21
 11c:	3c 8b       	std	Y+20, r19	; 0x14
 11e:	2b 8b       	std	Y+19, r18	; 0x13
	binary[10] = '\0';

	return binary[(c - 48)];
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	f0 97       	sbiw	r30, 0x30	; 48
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	92 81       	ldd	r25, Z+2	; 0x02
 132:	02 c0       	rjmp	.+4      	; 0x138 <digitLookUp+0x84>
}

uint16_t digitLookUp(uint8_t c) {

	if(c < 48 || c > 57) {
		return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
	binary[8] = 0b0001010111110001; // 8
	binary[9] = 0b0001010110110000; // 9
	binary[10] = '\0';

	return binary[(c - 48)];
}
 138:	64 96       	adiw	r28, 0x14	; 20
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <writeChar>:
void writeChar(char ch, int pos) {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	eb 01       	movw	r28, r22
	// If pos is less than zero or greater than 5, do nothing
	if(pos < 0 || pos > 5) {
 150:	66 30       	cpi	r22, 0x06	; 6
 152:	71 05       	cpc	r23, r1
 154:	d8 f5       	brcc	.+118    	; 0x1cc <writeChar+0x82>

	uint16_t digitBinary = 0;
	uint8_t nibble_0 = 0, nibble_1 = 0, nibble_2 = 0, nibble_3 = 0, oldValue = 0, mask = 0, increment = 0;

	// Fetch the value needed to display number "ch" in LCDDRx
	digitBinary = digitLookUp(ch);
 156:	0e 94 5a 00 	call	0xb4	; 0xb4 <digitLookUp>

	// Bitshift 1 bit to get valid values for incrementing the pointer
	increment = pos >> 1;
 15a:	fe 01       	movw	r30, r28
 15c:	f5 95       	asr	r31
 15e:	e7 95       	ror	r30

	// Depending on if the value of pos is even or odd we adjust the nibbles
	// and mask correctly
	if((pos % 2) == 0) {
 160:	c0 fd       	sbrc	r28, 0
 162:	11 c0       	rjmp	.+34     	; 0x186 <writeChar+0x3c>
		nibble_0 = 0b00001111 & (digitBinary >> 12);
 164:	59 2f       	mov	r21, r25
 166:	52 95       	swap	r21
 168:	5f 70       	andi	r21, 0x0F	; 15
		nibble_1 = 0b00001111 & (digitBinary >> 8);
 16a:	49 2f       	mov	r20, r25
 16c:	4f 70       	andi	r20, 0x0F	; 15
		nibble_2 = 0b00001111 & (digitBinary >> 4);
 16e:	9c 01       	movw	r18, r24
 170:	32 95       	swap	r19
 172:	22 95       	swap	r18
 174:	2f 70       	andi	r18, 0x0F	; 15
 176:	23 27       	eor	r18, r19
 178:	3f 70       	andi	r19, 0x0F	; 15
 17a:	23 27       	eor	r18, r19
 17c:	32 2f       	mov	r19, r18
 17e:	3f 70       	andi	r19, 0x0F	; 15
		nibble_3 = 0b00001111 & digitBinary;
 180:	8f 70       	andi	r24, 0x0F	; 15
		// This mask is needed to preserve what is on the right side of
		// LCDDRx
		mask = 0b11110000;
 182:	90 ef       	ldi	r25, 0xF0	; 240
 184:	10 c0       	rjmp	.+32     	; 0x1a6 <writeChar+0x5c>
	} else {
		nibble_0 = 0b11110000 & (digitBinary >> 8);
 186:	59 2f       	mov	r21, r25
 188:	50 7f       	andi	r21, 0xF0	; 240
		nibble_1 = 0b11110000 & (digitBinary >> 4);
 18a:	9c 01       	movw	r18, r24
 18c:	32 95       	swap	r19
 18e:	22 95       	swap	r18
 190:	2f 70       	andi	r18, 0x0F	; 15
 192:	23 27       	eor	r18, r19
 194:	3f 70       	andi	r19, 0x0F	; 15
 196:	23 27       	eor	r18, r19
 198:	42 2f       	mov	r20, r18
 19a:	40 7f       	andi	r20, 0xF0	; 240
		nibble_2 = 0b11110000 & digitBinary;
 19c:	38 2f       	mov	r19, r24
 19e:	30 7f       	andi	r19, 0xF0	; 240
		nibble_3 = 0b11110000 & (digitBinary << 4);
 1a0:	82 95       	swap	r24
 1a2:	80 7f       	andi	r24, 0xF0	; 240
		// Mask needed to preserve what is on the left side of LCDDRx
		mask = 0b00001111;
 1a4:	9f e0       	ldi	r25, 0x0F	; 15
 1a6:	ff 27       	eor	r31, r31
	// Create a pointer and assign the memory address of LCDDR0
	// (is volatile really needed?)
	volatile uint8_t *LCDDRAddress = &LCDDR0;
	// Increment the pointers memory address with the value calculated earlier
	// This is needed to be able to use LCDDR0+x, LCDDR1+x, LCDDR2+x etc.
	LCDDRAddress = (LCDDRAddress + increment);
 1a8:	e4 51       	subi	r30, 0x14	; 20
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
	// Preserve the old value by using a mask
	oldValue = mask & *LCDDRAddress;
 1ac:	20 81       	ld	r18, Z
 1ae:	29 23       	and	r18, r25
	// Add the nibble using OR
	*LCDDRAddress = oldValue | nibble_0;
 1b0:	25 2b       	or	r18, r21
 1b2:	20 83       	st	Z, r18
	// Increase the memory address of the pointer with 5 to be able to
	// use LCDDRx+5
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 1b4:	25 81       	ldd	r18, Z+5	; 0x05
 1b6:	29 23       	and	r18, r25
	*LCDDRAddress = oldValue | nibble_1;
 1b8:	24 2b       	or	r18, r20
 1ba:	25 83       	std	Z+5, r18	; 0x05
	// Increase with 5 to be able to use LCDDRx+10
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 1bc:	22 85       	ldd	r18, Z+10	; 0x0a
 1be:	29 23       	and	r18, r25
	*LCDDRAddress = oldValue | nibble_2;
 1c0:	23 2b       	or	r18, r19
 1c2:	22 87       	std	Z+10, r18	; 0x0a
	// Increase with 5 to be able to use LCDDRx+15
	LCDDRAddress = LCDDRAddress + 5;

	oldValue = mask & *LCDDRAddress;
 1c4:	27 85       	ldd	r18, Z+15	; 0x0f
 1c6:	92 23       	and	r25, r18
	*LCDDRAddress = oldValue | nibble_3;
 1c8:	89 2b       	or	r24, r25
 1ca:	87 87       	std	Z+15, r24	; 0x0f

}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <is_prime>:

bool is_prime(long i) {
 1d2:	4f 92       	push	r4
 1d4:	5f 92       	push	r5
 1d6:	6f 92       	push	r6
 1d8:	7f 92       	push	r7
 1da:	8f 92       	push	r8
 1dc:	9f 92       	push	r9
 1de:	af 92       	push	r10
 1e0:	bf 92       	push	r11
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
 1f2:	2b 01       	movw	r4, r22
 1f4:	3c 01       	movw	r6, r24
 1f6:	99 23       	and	r25, r25
 1f8:	2c f4       	brge	.+10     	; 0x204 <is_prime+0x32>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	42 1a       	sub	r4, r18
 1fe:	52 0a       	sbc	r5, r18
 200:	62 0a       	sbc	r6, r18
 202:	72 0a       	sbc	r7, r18
 204:	75 94       	asr	r7
 206:	67 94       	ror	r6
 208:	57 94       	ror	r5
 20a:	47 94       	ror	r4
 20c:	53 01       	movw	r10, r6
 20e:	42 01       	movw	r8, r4
 210:	22 e0       	ldi	r18, 0x02	; 2
 212:	42 16       	cp	r4, r18
 214:	51 04       	cpc	r5, r1
 216:	61 04       	cpc	r6, r1
 218:	71 04       	cpc	r7, r1
 21a:	18 f1       	brcs	.+70     	; 0x262 <is_prime+0x90>
		if(i%c == 0) {
 21c:	c6 2f       	mov	r28, r22
 21e:	d7 2f       	mov	r29, r23
 220:	18 2f       	mov	r17, r24
 222:	09 2f       	mov	r16, r25
 224:	60 ff       	sbrs	r22, 0
 226:	2f c0       	rjmp	.+94     	; 0x286 <is_prime+0xb4>
 228:	c1 2c       	mov	r12, r1
 22a:	d1 2c       	mov	r13, r1
 22c:	76 01       	movw	r14, r12
 22e:	68 94       	set
 230:	c1 f8       	bld	r12, 1
 232:	0c c0       	rjmp	.+24     	; 0x24c <is_prime+0x7a>
 234:	6c 2f       	mov	r22, r28
 236:	7d 2f       	mov	r23, r29
 238:	81 2f       	mov	r24, r17
 23a:	90 2f       	mov	r25, r16
 23c:	a7 01       	movw	r20, r14
 23e:	96 01       	movw	r18, r12
 240:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__udivmodsi4>
 244:	67 2b       	or	r22, r23
 246:	68 2b       	or	r22, r24
 248:	69 2b       	or	r22, r25
 24a:	f9 f0       	breq	.+62     	; 0x28a <is_prime+0xb8>
}

bool is_prime(long i) {
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	c8 1a       	sub	r12, r24
 250:	d8 0a       	sbc	r13, r24
 252:	e8 0a       	sbc	r14, r24
 254:	f8 0a       	sbc	r15, r24
 256:	8c 14       	cp	r8, r12
 258:	9d 04       	cpc	r9, r13
 25a:	ae 04       	cpc	r10, r14
 25c:	bf 04       	cpc	r11, r15
 25e:	50 f7       	brcc	.-44     	; 0x234 <is_prime+0x62>
 260:	05 c0       	rjmp	.+10     	; 0x26c <is_prime+0x9a>
 262:	c1 2c       	mov	r12, r1
 264:	d1 2c       	mov	r13, r1
 266:	76 01       	movw	r14, r12
 268:	68 94       	set
 26a:	c1 f8       	bld	r12, 1
			// Return false as the value of i is not a prime number
			return false;
		}
	}

	if(c == i/2 + 1) {
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	42 1a       	sub	r4, r18
 270:	52 0a       	sbc	r5, r18
 272:	62 0a       	sbc	r6, r18
 274:	72 0a       	sbc	r7, r18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	c4 14       	cp	r12, r4
 27a:	d5 04       	cpc	r13, r5
 27c:	e6 04       	cpc	r14, r6
 27e:	f7 04       	cpc	r15, r7
 280:	29 f0       	breq	.+10     	; 0x28c <is_prime+0xba>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	03 c0       	rjmp	.+6      	; 0x28c <is_prime+0xba>
	uint32_t c;
	// Loop to check if a number is dividable with anything less than half the value of "i"
	for(c = 2; c <= i/2; c++) {
		if(i%c == 0) {
			// Return false as the value of i is not a prime number
			return false;
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	01 c0       	rjmp	.+2      	; 0x28c <is_prime+0xba>
 28a:	80 e0       	ldi	r24, 0x00	; 0
		// Return true as "i" is a prime number
		return true;
	}

	return false;
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	bf 90       	pop	r11
 29e:	af 90       	pop	r10
 2a0:	9f 90       	pop	r9
 2a2:	8f 90       	pop	r8
 2a4:	7f 90       	pop	r7
 2a6:	6f 90       	pop	r6
 2a8:	5f 90       	pop	r5
 2aa:	4f 90       	pop	r4
 2ac:	08 95       	ret

000002ae <printAt>:

void printAt(long num, int pos) {
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <printAt+0x12>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	6b 01       	movw	r12, r22
 2c6:	7c 01       	movw	r14, r24
 2c8:	8a 01       	movw	r16, r20
	lock(&mutexlock);
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 12 03 	call	0x624	; 0x624 <lock>
	// Use the global variable pp to test mutex
    pp = pos;
 2d2:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <pp+0x1>
 2d6:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 2da:	c7 01       	movw	r24, r14
 2dc:	b6 01       	movw	r22, r12
 2de:	24 e6       	ldi	r18, 0x64	; 100
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	0e 94 80 03 	call	0x700	; 0x700 <__divmodsi4>
 2ea:	2a e0       	ldi	r18, 0x0A	; 10
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	0e 94 80 03 	call	0x700	; 0x700 <__divmodsi4>
 2f6:	b8 01       	movw	r22, r16
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	82 0f       	add	r24, r18
 2fc:	0e 94 a5 00 	call	0x14a	; 0x14a <writeChar>
    for(volatile int i = 0; i < 30000; i++) {}
 300:	1a 82       	std	Y+2, r1	; 0x02
 302:	19 82       	std	Y+1, r1	; 0x01
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	80 33       	cpi	r24, 0x30	; 48
 30a:	95 47       	sbci	r25, 0x75	; 117
 30c:	54 f4       	brge	.+20     	; 0x322 <printAt+0x74>
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	9a 83       	std	Y+2, r25	; 0x02
 316:	89 83       	std	Y+1, r24	; 0x01
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	80 33       	cpi	r24, 0x30	; 48
 31e:	95 47       	sbci	r25, 0x75	; 117
 320:	b4 f3       	brlt	.-20     	; 0x30e <printAt+0x60>
    pp++;
 322:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <pp>
 326:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <pp+0x1>
 32a:	0f 5f       	subi	r16, 0xFF	; 255
 32c:	1f 4f       	sbci	r17, 0xFF	; 255
 32e:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <pp+0x1>
 332:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <pp>
    writeChar( num % 10 + '0', pp);
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	2a e0       	ldi	r18, 0x0A	; 10
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 80 03 	call	0x700	; 0x700 <__divmodsi4>
 346:	86 2f       	mov	r24, r22
 348:	b8 01       	movw	r22, r16
 34a:	80 5d       	subi	r24, 0xD0	; 208
 34c:	0e 94 a5 00 	call	0x14a	; 0x14a <writeChar>
    unlock(&mutexlock);
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 39 03 	call	0x672	; 0x672 <unlock>
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	08 95       	ret

0000036e <computePrimes>:

void computePrimes(int pos) {
 36e:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 370:	c1 2c       	mov	r12, r1
 372:	d1 2c       	mov	r13, r1
 374:	76 01       	movw	r14, r12
 376:	c3 94       	inc	r12
        if (is_prime(n)) {
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <is_prime>
 380:	88 23       	and	r24, r24
 382:	29 f0       	breq	.+10     	; 0x38e <computePrimes+0x20>
			// Lock the mutex
            printAt(n, pos);
 384:	ae 01       	movw	r20, r28
 386:	c7 01       	movw	r24, r14
 388:	b6 01       	movw	r22, r12
 38a:	0e 94 57 01 	call	0x2ae	; 0x2ae <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	c8 1a       	sub	r12, r24
 392:	d8 0a       	sbc	r13, r24
 394:	e8 0a       	sbc	r14, r24
 396:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
			// Lock the mutex
            printAt(n, pos);
            //yield();
        }
    }
 398:	ef cf       	rjmp	.-34     	; 0x378 <computePrimes+0xa>

0000039a <__vector_3>:
}

ISR(PCINT1_vect) {
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	// Check the current value of pin 7 and if active, make a yield
	if((PINB >> 7) == 0) {
 3bc:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 3be:	0e 94 f7 02 	call	0x5ee	; 0x5ee <yield>
	}
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_7>:

// Yield when timer interrupts
ISR(TIMER1_COMPA_vect) {
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
	yield();
 406:	0e 94 f7 02 	call	0x5ee	; 0x5ee <yield>
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <main>:

int main() {
	// Setup the clockspeed
	CLKPR  = 0x80;
 42c:	e1 e6       	ldi	r30, 0x61	; 97
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	80 83       	st	Z, r24
	CLKPR  = 0x00;
 434:	10 82       	st	Z, r1

	// Initialize LCD
	init_lcd();
 436:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>

    spawn(computePrimes, 0);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	87 eb       	ldi	r24, 0xB7	; 183
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 5e 02 	call	0x4bc	; 0x4bc <spawn>
    computePrimes(3);
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 b7 01 	call	0x36e	; 0x36e <computePrimes>

0000044e <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 44e:	dc 01       	movw	r26, r24
 450:	15 96       	adiw	r26, 0x05	; 5
 452:	1c 92       	st	X, r1
 454:	1e 92       	st	-X, r1
 456:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 458:	db 01       	movw	r26, r22
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	30 97       	sbiw	r30, 0x00	; 0
 462:	21 f4       	brne	.+8      	; 0x46c <enqueue+0x1e>
        *queue = p;
 464:	8d 93       	st	X+, r24
 466:	9c 93       	st	X, r25
 468:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 46a:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 46c:	24 81       	ldd	r18, Z+4	; 0x04
 46e:	35 81       	ldd	r19, Z+5	; 0x05
 470:	21 15       	cp	r18, r1
 472:	31 05       	cpc	r19, r1
 474:	d1 f7       	brne	.-12     	; 0x46a <enqueue+0x1c>
            q = q->next;
        q->next = p;
 476:	95 83       	std	Z+5, r25	; 0x05
 478:	84 83       	std	Z+4, r24	; 0x04
 47a:	08 95       	ret

0000047c <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <dispatch+0x6>
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	9a 83       	std	Y+2, r25	; 0x02
 488:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 48e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 492:	06 96       	adiw	r24, 0x06	; 6
 494:	0e 94 9f 03 	call	0x73e	; 0x73e <setjmp>
 498:	89 2b       	or	r24, r25
 49a:	59 f4       	brne	.+22     	; 0x4b2 <dispatch+0x36>
        current = next;
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	9a 81       	ldd	r25, Y+2	; 0x02
 4a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	06 96       	adiw	r24, 0x06	; 6
 4ae:	0e 94 bf 03 	call	0x77e	; 0x77e <longjmp>
    }
}
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <spawn>:

void spawn(void (* function)(int), int arg) {
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <spawn+0x6>
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 4c6:	f8 94       	cli
    if (!initialized) initialize();
 4c8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <initialized>
 4cc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <initialized+0x1>
 4d0:	23 2b       	or	r18, r19
 4d2:	89 f5       	brne	.+98     	; 0x536 <__stack+0x37>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 4d4:	28 ee       	ldi	r18, 0xE8	; 232
 4d6:	31 e0       	ldi	r19, 0x01	; 1
 4d8:	30 93 80 01 	sts	0x0180, r19	; 0x800180 <threads+0x5>
 4dc:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <threads+0x4>
 4e0:	25 e5       	ldi	r18, 0x55	; 85
 4e2:	32 e0       	ldi	r19, 0x02	; 2
 4e4:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <threads+0x72>
 4e8:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <threads+0x71>
 4ec:	22 ec       	ldi	r18, 0xC2	; 194
 4ee:	32 e0       	ldi	r19, 0x02	; 2
 4f0:	30 93 5a 02 	sts	0x025A, r19	; 0x80025a <threads+0xdf>
 4f4:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 4f8:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <threads+0x14c>
 4fc:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <threads+0x14b>

	PORTB = (1<<PB7);
 500:	20 e8       	ldi	r18, 0x80	; 128
 502:	25 b9       	out	0x05, r18	; 5
	// Pin Change Enable Mask (PCINT15)
	PCMSK1 = (1<<PCINT15);
 504:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	// External Interrupt Mask Register (EIMSK)
	EIMSK = (1<<PCIE1);
 508:	2d bb       	out	0x1d, r18	; 29
	// Timer 1 with 1024 prescaler with CTC (WGM13, WGM12)
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
 50a:	2d e0       	ldi	r18, 0x0D	; 13
 50c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 * 7812,5 / 1000 * 50 = 390,625
	 * 391 = 50 ms
	 * 391 = 0b110000111
	 */
	// Set Timer1 Output Compare A
	TIMSK1 = (1<<OCIE1A);
 510:	22 e0       	ldi	r18, 0x02	; 2
 512:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// Set Output Compare Register 1 A to 391 in binary
	//OCR1A = 0b110000111;
	OCR1A = 391; // Can use decimals too!
 516:	27 e8       	ldi	r18, 0x87	; 135
 518:	31 e0       	ldi	r19, 0x01	; 1
 51a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 51e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Start the timer on value 0
	TCNT1 = 0;
 522:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 526:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

    initialized = 1;
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <initialized+0x1>
 532:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 536:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 53a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 53e:	3a 83       	std	Y+2, r19	; 0x02
 540:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 542:	23 2b       	or	r18, r19
 544:	a9 f0       	breq	.+42     	; 0x570 <__stack+0x71>
        *queue = (*queue)->next;
 546:	e9 81       	ldd	r30, Y+1	; 0x01
 548:	fa 81       	ldd	r31, Y+2	; 0x02
 54a:	44 81       	ldd	r20, Z+4	; 0x04
 54c:	55 81       	ldd	r21, Z+5	; 0x05
 54e:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 552:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 556:	91 83       	std	Z+1, r25	; 0x01
 558:	80 83       	st	Z, r24
    newp->arg = arg;
 55a:	73 83       	std	Z+3, r23	; 0x03
 55c:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 55e:	15 82       	std	Z+5, r1	; 0x05
 560:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 562:	cf 01       	movw	r24, r30
 564:	06 96       	adiw	r24, 0x06	; 6
 566:	0e 94 9f 03 	call	0x73e	; 0x73e <setjmp>
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	49 f5       	brne	.+82     	; 0x5c0 <__stack+0xc1>
 56e:	01 c0       	rjmp	.+2      	; 0x572 <__stack+0x73>
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stack+0x71>
        ENABLE();
 572:	78 94       	sei
        current->function(current->arg);
 574:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 578:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 57c:	ed 91       	ld	r30, X+
 57e:	fc 91       	ld	r31, X
 580:	11 97       	sbiw	r26, 0x01	; 1
 582:	12 96       	adiw	r26, 0x02	; 2
 584:	8d 91       	ld	r24, X+
 586:	9c 91       	ld	r25, X
 588:	13 97       	sbiw	r26, 0x03	; 3
 58a:	09 95       	icall
        DISABLE();
 58c:	f8 94       	cli
        enqueue(current, &freeQ);
 58e:	62 e0       	ldi	r22, 0x02	; 2
 590:	71 e0       	ldi	r23, 0x01	; 1
 592:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 596:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 59a:	0e 94 27 02 	call	0x44e	; 0x44e <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 59e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 5a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 5a6:	00 97       	sbiw	r24, 0x00	; 0
 5a8:	51 f0       	breq	.+20     	; 0x5be <__stack+0xbf>
        *queue = (*queue)->next;
 5aa:	fc 01       	movw	r30, r24
 5ac:	24 81       	ldd	r18, Z+4	; 0x04
 5ae:	35 81       	ldd	r19, Z+5	; 0x05
 5b0:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 5b4:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 5b8:	0e 94 3e 02 	call	0x47c	; 0x47c <dispatch>
 5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <__stack+0xc1>
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stack+0xbf>
    }
    SETSTACK(&newp->context, &newp->stack);
 5c0:	e9 81       	ldd	r30, Y+1	; 0x01
 5c2:	fa 81       	ldd	r31, Y+2	; 0x02
 5c4:	36 96       	adiw	r30, 0x06	; 6
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ca:	87 59       	subi	r24, 0x97	; 151
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	91 8b       	std	Z+17, r25	; 0x11
 5d0:	80 8b       	std	Z+16, r24	; 0x10
 5d2:	93 8b       	std	Z+19, r25	; 0x13
 5d4:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 5d6:	6a e0       	ldi	r22, 0x0A	; 10
 5d8:	71 e0       	ldi	r23, 0x01	; 1
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	9a 81       	ldd	r25, Y+2	; 0x02
 5de:	0e 94 27 02 	call	0x44e	; 0x44e <enqueue>
    ENABLE();
 5e2:	78 94       	sei
}
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <yield>:

void yield(void) {
	DISABLE();
 5ee:	f8 94       	cli
	// Put the current thread into the readyQ
	enqueue(current, &readyQ);
 5f0:	6a e0       	ldi	r22, 0x0A	; 10
 5f2:	71 e0       	ldi	r23, 0x01	; 1
 5f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5fc:	0e 94 27 02 	call	0x44e	; 0x44e <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 600:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 604:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	59 f0       	breq	.+22     	; 0x622 <yield+0x34>
        *queue = (*queue)->next;
 60c:	fc 01       	movw	r30, r24
 60e:	24 81       	ldd	r18, Z+4	; 0x04
 610:	35 81       	ldd	r19, Z+5	; 0x05
 612:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 616:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
void yield(void) {
	DISABLE();
	// Put the current thread into the readyQ
	enqueue(current, &readyQ);
	// Start another thread from readyQ
	dispatch(dequeue(&readyQ));
 61a:	0e 94 3e 02 	call	0x47c	; 0x47c <dispatch>
	ENABLE();
 61e:	78 94       	sei
 620:	08 95       	ret
 622:	ff cf       	rjmp	.-2      	; 0x622 <yield+0x34>

00000624 <lock>:
}

void lock(mutex *m) {
	DISABLE();
 624:	f8 94       	cli
	// If the mutex is not locked, then lock it
	if(m->locked == 0) {
 626:	fc 01       	movw	r30, r24
 628:	20 81       	ld	r18, Z
 62a:	31 81       	ldd	r19, Z+1	; 0x01
 62c:	23 2b       	or	r18, r19
 62e:	29 f4       	brne	.+10     	; 0x63a <lock+0x16>
		m->locked = 1;
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	31 83       	std	Z+1, r19	; 0x01
 636:	20 83       	st	Z, r18
 638:	1a c0       	rjmp	.+52     	; 0x66e <lock+0x4a>
	// Otherwise enqueue the current thread that wants mutex and start another thread from readyQ
	} else {
		enqueue(current, &m->waitQ);
 63a:	bc 01       	movw	r22, r24
 63c:	6e 5f       	subi	r22, 0xFE	; 254
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 644:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 648:	0e 94 27 02 	call	0x44e	; 0x44e <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 64c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 650:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	51 f0       	breq	.+20     	; 0x66c <lock+0x48>
        *queue = (*queue)->next;
 658:	fc 01       	movw	r30, r24
 65a:	24 81       	ldd	r18, Z+4	; 0x04
 65c:	35 81       	ldd	r19, Z+5	; 0x05
 65e:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 662:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
	if(m->locked == 0) {
		m->locked = 1;
	// Otherwise enqueue the current thread that wants mutex and start another thread from readyQ
	} else {
		enqueue(current, &m->waitQ);
		dispatch(dequeue(&readyQ));
 666:	0e 94 3e 02 	call	0x47c	; 0x47c <dispatch>
 66a:	01 c0       	rjmp	.+2      	; 0x66e <lock+0x4a>
 66c:	ff cf       	rjmp	.-2      	; 0x66c <lock+0x48>
	}
	ENABLE();
 66e:	78 94       	sei
 670:	08 95       	ret

00000672 <unlock>:
}

void unlock(mutex *m) {
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
	DISABLE();
 676:	f8 94       	cli
	// If there is a thread waiting in waitQ in the mutex, enqueue the current thread and start 
	// the thread in waitQ that is stored in mutex
	if(m->waitQ) {
 678:	fc 01       	movw	r30, r24
 67a:	22 81       	ldd	r18, Z+2	; 0x02
 67c:	33 81       	ldd	r19, Z+3	; 0x03
 67e:	23 2b       	or	r18, r19
 680:	b1 f0       	breq	.+44     	; 0x6ae <unlock+0x3c>
 682:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 684:	6a e0       	ldi	r22, 0x0A	; 10
 686:	71 e0       	ldi	r23, 0x01	; 1
 688:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 68c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 690:	0e 94 27 02 	call	0x44e	; 0x44e <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	41 f0       	breq	.+16     	; 0x6ac <unlock+0x3a>
        *queue = (*queue)->next;
 69c:	fc 01       	movw	r30, r24
 69e:	24 81       	ldd	r18, Z+4	; 0x04
 6a0:	35 81       	ldd	r19, Z+5	; 0x05
 6a2:	3b 83       	std	Y+3, r19	; 0x03
 6a4:	2a 83       	std	Y+2, r18	; 0x02
	DISABLE();
	// If there is a thread waiting in waitQ in the mutex, enqueue the current thread and start 
	// the thread in waitQ that is stored in mutex
	if(m->waitQ) {
		enqueue(current, &readyQ);
		dispatch(dequeue(&m->waitQ));
 6a6:	0e 94 3e 02 	call	0x47c	; 0x47c <dispatch>
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <unlock+0x42>
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <unlock+0x3a>
	// Otherwise unlock the mutex
	} else {
		m->locked = 0;
 6ae:	fc 01       	movw	r30, r24
 6b0:	11 82       	std	Z+1, r1	; 0x01
 6b2:	10 82       	st	Z, r1
	}
	ENABLE();
 6b4:	78 94       	sei
}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <__udivmodsi4>:
 6bc:	a1 e2       	ldi	r26, 0x21	; 33
 6be:	1a 2e       	mov	r1, r26
 6c0:	aa 1b       	sub	r26, r26
 6c2:	bb 1b       	sub	r27, r27
 6c4:	fd 01       	movw	r30, r26
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <__udivmodsi4_ep>

000006c8 <__udivmodsi4_loop>:
 6c8:	aa 1f       	adc	r26, r26
 6ca:	bb 1f       	adc	r27, r27
 6cc:	ee 1f       	adc	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	a2 17       	cp	r26, r18
 6d2:	b3 07       	cpc	r27, r19
 6d4:	e4 07       	cpc	r30, r20
 6d6:	f5 07       	cpc	r31, r21
 6d8:	20 f0       	brcs	.+8      	; 0x6e2 <__udivmodsi4_ep>
 6da:	a2 1b       	sub	r26, r18
 6dc:	b3 0b       	sbc	r27, r19
 6de:	e4 0b       	sbc	r30, r20
 6e0:	f5 0b       	sbc	r31, r21

000006e2 <__udivmodsi4_ep>:
 6e2:	66 1f       	adc	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	1a 94       	dec	r1
 6ec:	69 f7       	brne	.-38     	; 0x6c8 <__udivmodsi4_loop>
 6ee:	60 95       	com	r22
 6f0:	70 95       	com	r23
 6f2:	80 95       	com	r24
 6f4:	90 95       	com	r25
 6f6:	9b 01       	movw	r18, r22
 6f8:	ac 01       	movw	r20, r24
 6fa:	bd 01       	movw	r22, r26
 6fc:	cf 01       	movw	r24, r30
 6fe:	08 95       	ret

00000700 <__divmodsi4>:
 700:	05 2e       	mov	r0, r21
 702:	97 fb       	bst	r25, 7
 704:	1e f4       	brtc	.+6      	; 0x70c <__divmodsi4+0xc>
 706:	00 94       	com	r0
 708:	0e 94 97 03 	call	0x72e	; 0x72e <__negsi2>
 70c:	57 fd       	sbrc	r21, 7
 70e:	07 d0       	rcall	.+14     	; 0x71e <__divmodsi4_neg2>
 710:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__udivmodsi4>
 714:	07 fc       	sbrc	r0, 7
 716:	03 d0       	rcall	.+6      	; 0x71e <__divmodsi4_neg2>
 718:	4e f4       	brtc	.+18     	; 0x72c <__divmodsi4_exit>
 71a:	0c 94 97 03 	jmp	0x72e	; 0x72e <__negsi2>

0000071e <__divmodsi4_neg2>:
 71e:	50 95       	com	r21
 720:	40 95       	com	r20
 722:	30 95       	com	r19
 724:	21 95       	neg	r18
 726:	3f 4f       	sbci	r19, 0xFF	; 255
 728:	4f 4f       	sbci	r20, 0xFF	; 255
 72a:	5f 4f       	sbci	r21, 0xFF	; 255

0000072c <__divmodsi4_exit>:
 72c:	08 95       	ret

0000072e <__negsi2>:
 72e:	90 95       	com	r25
 730:	80 95       	com	r24
 732:	70 95       	com	r23
 734:	61 95       	neg	r22
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	8f 4f       	sbci	r24, 0xFF	; 255
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	08 95       	ret

0000073e <setjmp>:
 73e:	dc 01       	movw	r26, r24
 740:	2d 92       	st	X+, r2
 742:	3d 92       	st	X+, r3
 744:	4d 92       	st	X+, r4
 746:	5d 92       	st	X+, r5
 748:	6d 92       	st	X+, r6
 74a:	7d 92       	st	X+, r7
 74c:	8d 92       	st	X+, r8
 74e:	9d 92       	st	X+, r9
 750:	ad 92       	st	X+, r10
 752:	bd 92       	st	X+, r11
 754:	cd 92       	st	X+, r12
 756:	dd 92       	st	X+, r13
 758:	ed 92       	st	X+, r14
 75a:	fd 92       	st	X+, r15
 75c:	0d 93       	st	X+, r16
 75e:	1d 93       	st	X+, r17
 760:	cd 93       	st	X+, r28
 762:	dd 93       	st	X+, r29
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	8d b7       	in	r24, 0x3d	; 61
 76a:	8d 93       	st	X+, r24
 76c:	8e b7       	in	r24, 0x3e	; 62
 76e:	8d 93       	st	X+, r24
 770:	8f b7       	in	r24, 0x3f	; 63
 772:	8d 93       	st	X+, r24
 774:	ed 93       	st	X+, r30
 776:	fd 93       	st	X+, r31
 778:	88 27       	eor	r24, r24
 77a:	99 27       	eor	r25, r25
 77c:	09 94       	ijmp

0000077e <longjmp>:
 77e:	dc 01       	movw	r26, r24
 780:	cb 01       	movw	r24, r22
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	91 05       	cpc	r25, r1
 786:	81 1d       	adc	r24, r1
 788:	2d 90       	ld	r2, X+
 78a:	3d 90       	ld	r3, X+
 78c:	4d 90       	ld	r4, X+
 78e:	5d 90       	ld	r5, X+
 790:	6d 90       	ld	r6, X+
 792:	7d 90       	ld	r7, X+
 794:	8d 90       	ld	r8, X+
 796:	9d 90       	ld	r9, X+
 798:	ad 90       	ld	r10, X+
 79a:	bd 90       	ld	r11, X+
 79c:	cd 90       	ld	r12, X+
 79e:	dd 90       	ld	r13, X+
 7a0:	ed 90       	ld	r14, X+
 7a2:	fd 90       	ld	r15, X+
 7a4:	0d 91       	ld	r16, X+
 7a6:	1d 91       	ld	r17, X+
 7a8:	cd 91       	ld	r28, X+
 7aa:	dd 91       	ld	r29, X+
 7ac:	ed 91       	ld	r30, X+
 7ae:	fd 91       	ld	r31, X+
 7b0:	0d 90       	ld	r0, X+
 7b2:	f8 94       	cli
 7b4:	fe bf       	out	0x3e, r31	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	ed bf       	out	0x3d, r30	; 61
 7ba:	ed 91       	ld	r30, X+
 7bc:	fd 91       	ld	r31, X+
 7be:	09 94       	ijmp

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
